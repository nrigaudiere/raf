{"version":3,"file":"raf.umd.js","sources":["../lib/RafTimer.js","../lib/raf.js","demo.js","../lib/FpsLimiter.js"],"sourcesContent":["/**\n * @module RafTimer\n */\n\n/**\n * Create a new RafTimer instance.\n * @class RafTimer\n * @param {number} delay Number of milliseconds before executing the callback.\n * @param {Function} cb Callback function executed when the timer hit 0. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {boolean} [autostart=true] Optional (default true). Auto-start the timer (Don't need to call start() method).\n * @example\n * import { raf, RafTimer } from '@flunch/raf'\n *\n * const timer = new RafTimer(2000, restart => {\n *   console.log('Will be logged after 2000ms')\n *   restart() // Restart the timer. onDone will be called after another 2000ms.\n * })\n *\n * raf.add(dt => timer.update(dt))\n */\nfunction RafTimer (delay, cb, autostart) {\n  if (autostart === void 0) autostart = true\n\n  this._stopped = !autostart\n  this._remainder = 0\n  this._delay = delay | 0\n  this._remainingTime = delay\n  this._callback = cb === undefined ? function () {} : cb\n\n  // fast binding\n  var restart = this.restart\n  var self = this\n  this.restart = function (n, u) { restart.call(self, n, u) }\n\n  if (this._delay === 0) this._stopped = true\n}\n\n/**\n * Set a new callback function.\n * @method\n * @param {function} newCallback New callback function. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {number} [newDelay] Optional. Set a new delay (in ms). If set, the timer will be restarted\n */\nRafTimer.prototype.setCallback = function setCallback (newCallback, newDelay) {\n  this._callback = newCallback === undefined ? function () {} : newCallback\n  if (newDelay) this.restart(newDelay)\n}\n\n/**\n * Stop the timer. update() calls will do nothing.\n * @method\n */\nRafTimer.prototype.stop = function stop () {\n  this._stopped = true\n}\n\n/**\n * Start the timer if stopped.\n * @method\n */\nRafTimer.prototype.start = function start () {\n  if (!this._stopped) return\n  this.restart()\n}\n\n/**\n * Restart the timer\n * @method\n * @param {number} newDelay\n * @param {boolean} [useRemainder=true] Optional (default true). Use deltatime's remainder from the last time the timer hits 0.\n */\nRafTimer.prototype.restart = function restart (newDelay, useRemainder) {\n  if (useRemainder === void 0) useRemainder = true\n\n  if (newDelay !== undefined) this._delay = newDelay\n  this._stopped = false\n  this._remainingTime = this._delay - (this._remainder * (+useRemainder))\n}\n\n/**\n * Update remaining time. Usually executed inside a requestAnimationFrame call.\n * @method\n * @param {number} dt Time elapsed since the last call (in ms).\n */\nRafTimer.prototype.update = function update (dt) {\n  if (this._stopped) return\n  this._remainingTime -= dt\n  if (this._remainingTime <= 0) {\n    this._stopped = true\n    this._remainder = (-this._remainingTime) % this._delay\n    this._callback(this.restart)\n  } else {\n    this._remainder = 0\n  }\n}\n\n/**\n * Stop the timer and remove callback reference\n * @method\n */\nRafTimer.prototype.dispose = function dispose () {\n  this._callback = this.restart = function () {}\n  this._stopped = true\n  this._remainder = 0\n  this._remainingTime = this._delay\n}\n\nexport default RafTimer\n","/**\n * @module raf\n */\n\nvar _observers = []\nvar _afterObservers = []\nvar _beforeObservers = []\nvar _rafHandler = null\nvar _lastDate = null\nvar _runner = _simpleRun\n\nfunction _simpleRun (timestamp) {\n  if (timestamp === void 0) timestamp = 16.67 // default 60fps\n  if (_lastDate === null) _lastDate = timestamp\n  var _delta = timestamp - _lastDate\n  _lastDate = timestamp\n  for (var i = 0; i < _observers.length; i++) _observers[i](_delta)\n  _rafHandler = window.requestAnimationFrame(_runner)\n}\n\nfunction _complexRun (timestamp) {\n  if (timestamp === void 0) timestamp = 16.67 // default 60fps\n  if (_lastDate === null) _lastDate = timestamp\n  var _delta = timestamp - _lastDate\n  _lastDate = timestamp\n  for (var i = 0; i < _beforeObservers.length; i++) _beforeObservers[i](_delta)\n  for (var i = 0; i < _observers.length; i++) _observers[i](_delta)\n  for (var i = 0; i < _afterObservers.length; i++) _afterObservers[i](_delta)\n  _rafHandler = window.requestAnimationFrame(_runner)\n}\n\nfunction _swapRunner () {\n  _runner = (_afterObservers.length > 0 || _beforeObservers > 0)\n    ? _complexRun\n    : _simpleRun\n}\n\n/**\n * Add functions for execution at the beginning of the raf call\n * @param {(function|array)} fns Function or Array of Functions to be called at the start of the raf\n */\nfunction setBefore (fns) {\n  _beforeObservers = Array.isArray(fns) ? fns : [fns]\n  _swapRunner()\n}\n\n/**\n * Add functions for execution at the end of the raf call\n * @param {(function|array)} fns Function or Array of Functions to be called at the end of the raf\n */\nfunction setAfter (fns) {\n  _afterObservers = Array.isArray(fns) ? fns : [fns]\n  _swapRunner()\n}\n\n/**\n * Add a function for execution on each frame\n * @param {function} fn Function to be called\n */\nfunction add (fn) {\n  if (!fn) return\n  if (_observers.indexOf(fn) === -1) {\n    _observers.push(fn)\n    start()\n  }\n}\n\n/**\n * Remove a function for execution on each frame\n * @param {function} fn Function to remove from the raf\n */\nfunction remove (fn) {\n  if (!fn) return\n  var index = _observers.indexOf(fn)\n  if (index !== -1) {\n    _observers.splice(index, 1)\n    if (_observers.length === 0) stop()\n  }\n}\n\n/**\n * Force start the raf. You usually don't need to use it.\n */\nfunction start () {\n  if (_rafHandler) return\n  _lastDate = null\n  _runner()\n}\n\n/**\n * Force stop the raf. You usually don't need to use it.\n */\nfunction stop () {\n  if (!_rafHandler) return\n  window.cancelAnimationFrame(_rafHandler)\n  _rafHandler = null\n}\n\nexport default { add, remove, start, stop, setAfter, setBefore }\n","import { raf, fpsLimiter, RafTimer } from '..'\n\nfunction log (el, msg, reset = false) { el.innerHTML = (reset ? '' : el.innerHTML) + msg + '\\n' }\n\n// raf\n(function () {\n  const $ = document.querySelector('pre.raf')\n  function tick (dt) {\n    log($, 'Deltatime: ' + dt + 'ms', true)\n  }\n  raf.add(tick)\n})()\n\n// fps limiter\n;(function () {\n  const $ = document.querySelector('pre.fpslimiter')\n  let ping = true\n  raf.add(fpsLimiter(1, function () {\n    log($, (ping ? '—> Ping!' : '<— Pong!') + ' (1fps framerate)', true)\n    console.log('ok')\n    ping = !ping\n  }))\n})()\n\n// raf timer\n;(function () {\n  const $ = document.querySelector('pre.raftimer')\n  log($, 'Next call in 1000ms')\n  const timer = new RafTimer(1000, restart => {\n    const nDelay = (Math.random() - 0.5) * 4000 + 2000 | 0\n    log($, 'Called — Next call in ' + nDelay + 'ms', true)\n    restart(nDelay)\n  })\n  raf.add(dt => timer.update(dt))\n})()\n","/**\n * Limite function calls to a specified framerate\n * @module fpsLimiter\n * @param {number} [framerate=30] Framerate\n * @param {function} callback Function to be called at the specified frame interval\n * @return {function} Framerate-limited function to add to your raf\n * @example\n * import { raf, fpsLimiter } from '@flunch/raf'\n *\n * function tick () {\n *   console.log('called each 10 fps')\n * }\n *\n * const limited = fpsLimiter(10, tick)\n * raf.add(limited)\n */\nfunction fpsLimiter (framerate, callback) {\n  if (callback === void 0) throw new Error('You must specify a callback')\n  if (framerate === void 0) framerate = 30\n  var _interval = 1000 / framerate\n  var _remainingTime = 0\n  return function (dt) {\n    _remainingTime -= dt\n    if (_remainingTime <= 0) {\n      callback(dt)\n      _remainingTime = _interval + (_remainingTime % _interval)\n    }\n  }\n}\n\nexport default fpsLimiter\n"],"names":["RafTimer","delay","cb","autostart","this","_stopped","_remainder","_delay","_remainingTime","_callback","undefined","restart","self","n","u","call","prototype","setCallback","newCallback","newDelay","stop","start","useRemainder","update","dt","dispose","_observers","_afterObservers","_beforeObservers","_rafHandler","_lastDate","_runner","_simpleRun","timestamp","_delta","i","length","window","requestAnimationFrame","_complexRun","_swapRunner","cancelAnimationFrame","$","ping","fn","indexOf","push","index","splice","fns","Array","isArray","log","el","msg","reset","innerHTML","const","document","querySelector","raf","add","framerate","callback","Error","_interval","fpsLimiter","console","timer","nDelay","Math","random"],"mappings":"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"}