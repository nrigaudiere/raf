{"version":3,"file":"raf.umd.js","sources":["../lib/RafTimer.js","../lib/raf.js","demo.js","../lib/FpsLimiter.js"],"sourcesContent":["'use strict'\n\n/**\n * @module RafTimer\n */\n\n/**\n * Create a new RafTimer instance.\n * @class RafTimer\n * @param {number} delay Number of milliseconds before executing the callback.\n * @param {Function} cb Callback function executed when the timer hit 0. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {boolean} [autostart=true] Optional (default true). Auto-start the timer (Don't need to call start() method).\n * @example\n * import { raf, RafTimer } from '@internet/raf'\n *\n * const timer = new RafTimer(2000, restart => {\n *   console.log('Will be logged after 2000ms')\n *   restart() // Restart the timer. onDone will be called after another 2000ms.\n * })\n *\n * raf.add(dt => timer.update(dt))\n */\nfunction RafTimer (delay, cb, autostart) {\n  if (autostart === void 0) autostart = true\n\n  this._stopped = !autostart\n  this._remainder = 0\n  this._delay = delay | 0\n  this._remainingTime = delay\n  this._callback = cb === undefined ? function () {} : cb\n\n  // fast binding\n  var restart = this.restart\n  var self = this\n  this.restart = function (n, u) { restart.call(self, n, u) }\n\n  if (this._delay === 0) this._stopped = true\n}\n\n/**\n * Set a new callback function.\n * @method\n * @param {function} newCallback New callback function. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {number} [newDelay] Optional. Set a new delay (in ms). If set, the timer will be restarted\n */\nRafTimer.prototype.setCallback = function setCallback (newCallback, newDelay) {\n  this._callback = newCallback === undefined ? function () {} : newCallback\n  if (newDelay) this.restart(newDelay)\n}\n\n/**\n * Stop the timer. update() calls will do nothing.\n * @method\n */\nRafTimer.prototype.stop = function stop () {\n  this._stopped = true\n}\n\n/**\n * Start the timer if stopped.\n * @method\n */\nRafTimer.prototype.start = function start () {\n  if (!this._stopped) return\n  this.restart()\n}\n\n/**\n * Restart the timer\n * @method\n * @param {number} newDelay\n * @param {boolean} [useRemainder=true] Optional (default true). Use deltatime's remainder from the last time the timer hits 0.\n */\nRafTimer.prototype.restart = function restart (newDelay, useRemainder) {\n  if (useRemainder === void 0) useRemainder = true\n\n  if (newDelay !== undefined) this._delay = newDelay\n  this._stopped = false\n  this._remainingTime = this._delay - (this._remainder * (+useRemainder))\n}\n\n/**\n * Update remaining time. Usually executed inside a requestAnimationFrame call.\n * @method\n * @param {number} dt Time elapsed since the last call (in ms).\n */\nRafTimer.prototype.update = function update (dt) {\n  if (this._stopped) return\n  this._remainingTime -= dt\n  if (this._remainingTime <= 0) {\n    this._stopped = true\n    this._remainder = (-this._remainingTime) % this._delay\n    this._callback(this.restart)\n  } else {\n    this._remainder = 0\n  }\n}\n\n/**\n * Stop the timer and remove callback reference\n * @method\n */\nRafTimer.prototype.dispose = function dispose () {\n  this._callback = this.restart = function () {}\n  this._stopped = true\n  this._remainder = 0\n  this._remainingTime = this._delay\n}\n\nexport default RafTimer\n","'use strict'\n\n/**\n * @module raf\n */\n\nvar root = typeof window === 'undefined' ? global : window\nvar _observers = []\nvar _afterObservers = []\nvar _beforeObservers = []\nvar _rafHandler = null\nvar _lastDate = null\nvar _once = false\nvar _complex = false\n\n/**\n * @property {number} time Time elapsed between the previous and the current frame\n */\nvar time\n\n/**\n * @property {number} dt Time elapsed\n */\nvar dt\n\nfunction _frame (timestamp) {\n  // compute deltatime and time\n  if (timestamp === void 0) timestamp = 0\n  if (_lastDate === null) _lastDate = timestamp\n  dt = timestamp - _lastDate\n  time += dt\n  _lastDate = timestamp\n  // we request the frame now, allowing to cancel it from observers\n  _rafHandler = _once ? null : root.requestAnimationFrame(_frame)\n  if (_once) _once = false\n  // call all observers\n  var i\n  if (_complex) {\n    for (i = 0; i < _beforeObservers.length; i++) _beforeObservers[i](dt)\n    for (i = 0; i < _observers.length; i++) _observers[i](dt)\n    for (i = 0; i < _afterObservers.length; i++) _afterObservers[i](dt)\n  } else {\n    for (i = 0; i < _observers.length; i++) _observers[i](dt)\n  }\n}\n\nfunction _swapRunner () {\n  _complex = !!(_afterObservers.length > 0 || _beforeObservers.length > 0)\n}\n\nfunction _addObserver (arr, fn, prepend) {\n  if (!fn || !arr) return false\n  if (~arr.indexOf(fn)) return false\n  prepend = !!prepend\n  prepend ? arr.unshift(fn) : arr.push(fn)\n  return true\n}\n\nfunction _removeObserver (arr, fn) {\n  if (!fn) return false\n  var index = arr.indexOf(fn)\n  if (!~index) return false\n  arr.splice(index, 1)\n  return !!(arr.length === 0)\n}\n\n/**\n * Add a function for execution at the beginning of the raf call\n * Calling addBefore will not start the raf.\n * @param {function} fn Function to be called at the start of the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n */\nfunction addBefore (fn, prepend) {\n  _addObserver(_beforeObservers, fn, prepend) && _swapRunner()\n}\n\n/**\n * Add a function for execution at the end of the raf call\n * Calling addAfter will not start the raf.\n * @param {function} fn Function to be called at the end of the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n */\nfunction addAfter (fn, prepend) {\n  _addObserver(_afterObservers, fn, prepend) && _swapRunner()\n}\n\n/**\n * Add a function for execution on each frame\n * @param {function} fn Function to be called\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n */\nfunction add (fn, prepend) {\n  _addObserver(_observers, fn, prepend) && start()\n}\n\n/**\n * Remove a function for execution at the beginning of the raf call\n * Calling removeBefore will not stop the raf.\n * @param {function} fn Function to remove from the raf\n */\nfunction removeBefore (fn) {\n  console.log('remove')\n  _removeObserver(_beforeObservers, fn) && _swapRunner()\n}\n\n/**\n * Remove a function for execution at the end of the raf call\n * Calling removeAfter will not stop the raf.\n * @param {function} fn Function to remove from the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n */\nfunction removeAfter (fn, prepend) {\n  _removeObserver(_afterObservers, fn) && _swapRunner()\n}\n\n/**\n * Remove a function for execution on each frame\n * @param {function} fn Function to remove from the raf\n */\nfunction remove (fn) {\n  _removeObserver(_observers, fn) && stop()\n}\n\n/**\n * Force start the raf. You usually don't need to use it.\n * @param {boolean} [instant=false] Directly make a raf call without waiting for the next frame (default false)\n */\nfunction start (instant) {\n  _once = false\n  if (_rafHandler) return\n  instant = !!instant\n  _lastDate = null\n  if (instant) _frame()\n  else _rafHandler = root.requestAnimationFrame(_frame)\n}\n\n/**\n * Request once the raf. Will not be executed if the raf is already running.\n */\nfunction requestOnce () {\n  if (_rafHandler) return\n  _once = true\n  _lastDate = null\n  _rafHandler = root.requestAnimationFrame(_frame)\n}\n\n/**\n * Force stop the raf. You usually don't need to use it.\n */\nfunction stop () {\n  if (!_rafHandler) return\n  root.cancelAnimationFrame(_rafHandler)\n  _rafHandler = null\n}\n\n/**\n * Remove all observers from the raf singleton and stop the raf if it's running. Reset time.\n */\nfunction dispose () {\n  stop()\n  _observers.length = 0\n  _afterObservers.length = 0\n  _beforeObservers.length = 0\n  _complex = false\n  _lastDate = null\n  time = 0\n  dt = 0\n}\n\nexport default {\n  add,\n  addAfter,\n  addBefore,\n  remove,\n  removeAfter,\n  removeBefore,\n  start,\n  stop,\n  time,\n  dt,\n  requestOnce,\n  dispose\n}\n","import { raf, fpsLimiter, RafTimer } from '..'\n\nfunction log (el, msg, reset = false) { el.innerHTML = (reset ? '' : el.innerHTML) + msg + '\\n' }\n\nconst toRun = []\n\n;(function () {\n  const $ = document.querySelector('pre.log')\n  function tick (dt) {\n    log($, 'addBefore & requestOnce')\n    raf.removeBefore(tick)\n    toRun.forEach(raf.add)\n  }\n  raf.addBefore(tick)\n  raf.requestOnce()\n})()\n\n// raf\n;(function () {\n  const $ = document.querySelector('pre.raf')\n  function tick (dt) {\n    log($, 'Deltatime: ' + dt + 'ms', true)\n  }\n  toRun.push(tick)\n})()\n\n// fps limiter\n;(function () {\n  const $ = document.querySelector('pre.fpslimiter')\n  let ping = true\n  toRun.push(fpsLimiter(1, function () {\n    log($, (ping ? '—> Ping!' : '<— Pong!') + ' (1fps framerate)', true)\n    console.log('ok')\n    ping = !ping\n  }))\n})()\n\n// raf timer\n;(function () {\n  const $ = document.querySelector('pre.raftimer')\n  log($, 'Next call in 1000ms')\n  const timer = new RafTimer(1000, restart => {\n    const nDelay = (Math.random() - 0.5) * 4000 + 2000 | 0\n    log($, 'Called — Next call in ' + nDelay + 'ms', true)\n    restart(nDelay)\n  })\n  toRun.push(dt => timer.update(dt))\n})()\n","'use strict'\n\n/**\n * Limite function calls to a specified framerate\n * @module fpsLimiter\n * @param {number} [framerate=30] Framerate\n * @param {function} callback Function to be called at the specified frame interval\n * @return {function} Framerate-limited function to add to your raf\n * @example\n * import { raf, fpsLimiter } from '@internet/raf'\n *\n * function tick () {\n *   console.log('called each 10 fps')\n * }\n *\n * const limited = fpsLimiter(10, tick)\n * raf.add(limited)\n */\nfunction fpsLimiter (framerate, callback) {\n  if (callback === void 0) throw new Error('You must specify a callback')\n  if (framerate === void 0) framerate = 30\n  var _interval = 1000 / framerate\n  var _remainingTime = 0\n  return function (dt) {\n    _remainingTime -= dt\n    if (_remainingTime <= 0) {\n      callback(dt)\n      _remainingTime = _interval + (_remainingTime % _interval)\n    }\n  }\n}\n\nexport default fpsLimiter\n"],"names":["RafTimer","delay","cb","autostart","this","_stopped","_remainder","_delay","_remainingTime","_callback","undefined","restart","self","n","u","call","prototype","setCallback","newCallback","newDelay","stop","start","useRemainder","update","dt","dispose","time","root","window","global","_observers","_afterObservers","_beforeObservers","_rafHandler","_lastDate","_once","_complex","_frame","timestamp","i","requestAnimationFrame","length","_swapRunner","_addObserver","arr","fn","prepend","indexOf","unshift","push","_removeObserver","index","splice","instant","cancelAnimationFrame","console","log","el","msg","reset","innerHTML","const","$","ping","toRun","document","querySelector","raf","addBefore","tick","removeBefore","forEach","add","requestOnce","framerate","callback","Error","_interval","fpsLimiter","timer","nDelay","Math","random"],"mappings":"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"}